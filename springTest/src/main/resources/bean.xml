<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

<!--    当使用 context:component-scan 后，就可以将 context:annotation-config移除-->
    <context:component-scan base-package="com.springTest.test"/>

    <!-- setter注入 -->
<!--        子标签是property-->
<!--        需要在类里写get 和 set-->
    <bean id="user1" class="com.springTest.test.dao.UserDao1">
        <property name="userName" value="张三"/>
    </bean>

<!--    构造器注入-->
<!--        index从0开始-->
<!--        子标签是constructor-arg-->
<!--        需要在类里用构造方法传入属性-->
    <bean id="user2" class="com.springTest.test.dao.UserDao2">
        <constructor-arg index="0" name="userName" value="李四"/>
    </bean>

<!--    本来想测试@required，但是被弃用了，只能用@autowired了-->
    <bean id="userDaoTestRequired" class="com.springTest.test.dao.UserDaoTestRequired">
        <property name="userName" value="userDaoTestRequired"/>
    </bean>

<!--    通过init方法自定义初始化bean-->
    <bean id="userDaoImplementsInitializingBean" class="com.springTest.test.dao.UserDaoImplementsInitializingBean" init-method="init"/>

<!--    内部bean-->
    <bean id="articleContentShowDao" class="com.springTest.test.dao.ArticleShowDao">
        <property name="articleContentDao">
            <bean class="com.springTest.test.dao.ArticleContentDao">
            </bean>
        </property>
    </bean>

<!--    当一个类有多个bean的时候，通过@Qualifier来指定具体用哪个bean-->
    <bean id="userDaoTestQualifier1" class="com.springTest.test.dao.UserDaoTestQualifier"/>
    <bean id="userDaoTestQualifier2" class="com.springTest.test.dao.UserDaoTestQualifier"/>

<!--    通过spring API来实现切面，前置通知-->
    <bean id="aspectTestBySpringAPI" class="com.springTest.test.aspect.AspectTestBySpringAPI"/>
    <aop:config>
        <aop:aspect ref="aspectTestBySpringAPI">
<!--            有两种写的方式，被注释的是一种，没被注释的是一种-->
            <aop:pointcut id="pointcut" expression="execution(* com.springTest.test.service.IndexService.test2(..))"/>
            <aop:before method="before" pointcut-ref="pointcut"/>
<!--            <aop:before method="before" pointcut="execution(* com.springTest.test.service.IndexService.test2(..))"/>-->
        </aop:aspect>
    </aop:config>

    <!--数据连接池配置-->
<!--    本来想用DriverManager，但是关闭web的时候报似乎启动了一个名为[mysql-cj-abandoned-connection-cleanup]的线程无法关闭，可能导致内存溢出的错误-->
<!--    说是如果web应用程序有MySQL JDBC驱动程序的副本，Tomcat可能会选择web应用程序的副本而不是全局的副本-->
<!--    而DriverManager是一个负责加载数据库驱动程序和创建数据库连接的类，每次都要创建一个新的数据库连接，需要手动管理数据库的打开和关闭，-->
<!--    数据库连接池就不一样了，可以自己管理数据库连接的生命周期，避免过多或过少的连接导致问题-->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
<!--    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">-->
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/test?useSSL=false&amp;serverTimezone=UTC"/>
        <property name="username" value="admin"/>
        <property name="password" value="123456"/>
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

<!--    注入一个 null 和一个空字符串-->
    <bean id="autowiredNull" class="com.springTest.test.dao.ArticleShowDao">
        <property name="articleContentDao">
                <null/>
        </property>
        <property name="title" value="#{null}"></property>
    </bean>

<!--    解决返回乱码-->
    <mvc:annotation-driven>
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8" />
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <aop:aspectj-autoproxy proxy-target-class="true"/>
</beans>